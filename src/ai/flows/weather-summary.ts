
// This file is generated by Firebase Genkit.
'use server';

/**
 * @fileOverview A weather summary AI agent.
 *
 * - summarizeWeather - A function that handles the weather summary process.
 * - WeatherSummaryInput - The input type for the summarizeWeather function.
 * - WeatherSummaryOutput - The return type for the summarizeWeather function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const WeatherSummaryInputSchema = z.object({
  city: z.string().describe('The city to get the weather summary for.'),
  temperature: z.number().describe('The current temperature in Celsius.'),
  feelsLike: z.number().describe('The current feels like temperature in Celsius.'),
  humidity: z.number().describe('The current humidity percentage.'),
  windSpeed: z.number().describe('The current wind speed in kilometers per hour.'),
  condition: z.string().describe('The current weather condition (e.g., sunny, cloudy, rainy).'),
});
export type WeatherSummaryInput = z.infer<typeof WeatherSummaryInputSchema>;

const WeatherSummaryOutputSchema = z.object({
  summary: z.string().describe('A short summary of the weather conditions.'),
  weatherSentiment: z.enum(['good', 'bad', 'neutral']).describe("The overall sentiment of the weather: 'good', 'bad', or 'neutral'.")
});
export type WeatherSummaryOutput = z.infer<typeof WeatherSummaryOutputSchema>;

export async function summarizeWeather(input: WeatherSummaryInput): Promise<WeatherSummaryOutput> {
  return weatherSummaryFlow(input);
}

const shouldIncludeFeelsLikeTool = ai.defineTool(
  {
    name: 'shouldIncludeFeelsLike',
    description: "Determines if the 'feels like' temperature is significantly different from the actual temperature and thus should be mentioned in a weather summary. Call this tool to check if the difference warrants mentioning the 'feels like' value.",
    inputSchema: z.object({
      temperature: z.number().describe('The current actual temperature.'),
      feelsLike: z.number().describe('The current feels like temperature.'),
    }),
    outputSchema: z.boolean().describe('Returns true if the difference between temperature and feelsLike is greater than 5 degrees, otherwise false.'),
  },
  async (toolInput: { temperature: number; feelsLike: number }) => {
    return Math.abs(toolInput.temperature - toolInput.feelsLike) > 5;
  }
);


const prompt = ai.definePrompt({
  name: 'weatherSummaryPrompt',
  input: {schema: WeatherSummaryInputSchema},
  output: {schema: WeatherSummaryOutputSchema},
  tools: [shouldIncludeFeelsLikeTool],
  prompt: `You are a helpful weather assistant. Your task is to provide a concise summary of the weather conditions for {{city}} and determine the overall weather sentiment.

Current weather data for {{city}}:
- Temperature: {{temperature}}°C
- Feels Like: {{feelsLike}}°C
- Condition: {{condition}}
- Humidity: {{humidity}}%
- Wind Speed: {{windSpeed}} km/h

Instructions:
1.  Analyze the difference between the actual temperature ({{temperature}}°C) and the 'feels like' temperature ({{feelsLike}}°C).
2.  Use the 'shouldIncludeFeelsLike' tool to decide if the 'feels like' temperature is significant enough to be mentioned.
3.  If the tool confirms its significance (returns true), incorporate the 'feels like' temperature into your summary. For example, "it feels like X°C". Otherwise, do not mention the 'feels like' temperature.
4.  Based on all conditions (temperature, actual condition, humidity, wind speed), determine if the overall weather sentiment is 'good', 'bad', or 'neutral'.
    -   'Bad' weather: Extreme temperatures (e.g., below 5°C or above 30°C), significant precipitation (rain, snow, storm), high winds (above 30 km/h).
    -   'Good' weather: Pleasant temperatures (e.g., 15°C-25°C), clear or partly cloudy skies, light winds.
    -   'Neutral' weather: Conditions that don't strongly fit 'good' or 'bad'.
5.  Set the 'weatherSentiment' field in your output schema to 'good', 'bad', or 'neutral'.
6.  Craft a summary that is easy to understand, focuses on the most important aspects, and does not exceed 50 words.

Begin your response with the summary.
`,
});

const weatherSummaryFlow = ai.defineFlow(
  {
    name: 'weatherSummaryFlow',
    inputSchema: WeatherSummaryInputSchema,
    outputSchema: WeatherSummaryOutputSchema,
  },
  async (flowInput: WeatherSummaryInput) => {
    const plainInput = { ...flowInput }; // Clone input to ensure it's a plain object
    const {output} = await prompt(plainInput);
    if (!output) {
      throw new Error('AI failed to generate weather summary output.');
    }
    return output;
  }
);
