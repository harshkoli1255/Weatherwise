
// This file is generated by Firebase Genkit.
'use server';

/**
 * @fileOverview A weather summary AI agent.
 *
 * - summarizeWeather - A function that handles the weather summary process.
 * - WeatherSummaryInput - The input type for the summarizeWeather function.
 * - WeatherSummaryOutput - The return type for the summarizeWeather function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const WeatherSummaryInputSchema = z.object({
  city: z.string().describe('The city to get the weather summary for.'),
  temperature: z.number().describe('The current temperature in Celsius.'),
  feelsLike: z.number().describe('The current feels like temperature in Celsius.'),
  humidity: z.number().describe('The current humidity percentage.'),
  windSpeed: z.number().describe('The current wind speed in kilometers per hour.'),
  condition: z.string().describe('The current weather condition (e.g., sunny, cloudy, rainy).'),
});
export type WeatherSummaryInput = z.infer<typeof WeatherSummaryInputSchema>;

const WeatherSummaryOutputSchema = z.object({
  summary: z.string().describe('A short summary of the weather conditions.'),
  weatherSentiment: z.enum(['good', 'bad', 'neutral']).describe("The overall sentiment of the weather: 'good', 'bad', or 'neutral'.")
});
export type WeatherSummaryOutput = z.infer<typeof WeatherSummaryOutputSchema>;

export async function summarizeWeather(input: WeatherSummaryInput): Promise<WeatherSummaryOutput> {
  return weatherSummaryFlow(input);
}

const shouldIncludeFeelsLikeTool = ai.defineTool({
  name: 'shouldIncludeFeelsLike',
  description: 'Determines whether to include the feels-like temperature in the weather summary based on the difference between the actual temperature and the feels-like temperature.',
  inputSchema: z.object({
    temperature: z.number().describe('The current temperature.'),
    feelsLike: z.number().describe('The current feels like temperature.'),
  }),
  outputSchema: z.boolean().describe('Whether to include the feels-like temperature in the weather summary.'),
  async fn(input) {
    return Math.abs(input.temperature - input.feelsLike) > 5;
  },
});

const prompt = ai.definePrompt({
  name: 'weatherSummaryPrompt',
  input: {schema: WeatherSummaryInputSchema},
  output: {schema: WeatherSummaryOutputSchema},
  tools: [shouldIncludeFeelsLikeTool],
  prompt: `You are a helpful weather assistant. Provide a concise summary of the weather conditions for {{city}}.\n\nCurrently, the temperature is {{temperature}}°C with {{condition}} conditions, {{humidity}}% humidity, and wind speeds of {{windSpeed}} km/h.\n\n{% tool_code shouldIncludeFeelsLikeTool with temperature={{temperature}} feelsLike={{feelsLike}} %} \n\n{% if shouldIncludeFeelsLikeTool.result %}The feels like temperature is {{feelsLike}}°C, which is significantly different from the actual temperature. {% endif %}\n\nBased on all these conditions, determine if the overall weather sentiment is 'good', 'bad', or 'neutral'. Extreme temperatures (e.g. below 5°C or above 30°C), significant precipitation (e.g. rain, snow, storm), and high winds (e.g. above 30 km/h) generally indicate 'bad' weather. Pleasant temperatures (e.g. 15°C-25°C), clear or partly cloudy skies, and light winds generally indicate 'good' weather. Otherwise, it's 'neutral'. Set the 'weatherSentiment' field in your output to one of 'good', 'bad', or 'neutral'.\n\nProvide a summary that is easy to understand. Focus on the most important and relevant aspects of the weather. The summary should not exceed 50 words.`,
});

const weatherSummaryFlow = ai.defineFlow(
  {
    name: 'diagnosePlantFlow', // Note: Keeping original flow name to avoid breaking other parts if this name is used elsewhere, though it should be 'weatherSummaryFlow'
    inputSchema: WeatherSummaryInputSchema,
    outputSchema: WeatherSummaryOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);

